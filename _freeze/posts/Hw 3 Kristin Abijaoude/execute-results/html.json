{
  "hash": "25b47cfb653498c6204ca1be7e66cf72",
  "result": {
    "markdown": "---\ntitle: \"HW 3 Kristin Abijaoude\"\nauthor: \"Kristin Abijaoude\"\ndesription: \"Reading in data and creating a post\"\ndate: \"11/15/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - hw3\n  - pathogen\n  - debt\n  - kristin_abijaoude\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(readr)\nlibrary(ggplot2)\nlibrary(readxl)\nlibrary(lubridate)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n#### Pathogen\n\n::: panel-tabset \\## Pathogen: Read Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npathogen <- read_xlsx(\"/Users/kristinabijaoude/Documents/GitHub/Github Help/601_Fall_2022/posts/_data/Total_cost_for_top_15_pathogens_2018.xlsx\",\n                              range = cell_rows(6:20),\n                              col_names = c(\"Pathogen\",\n                                        \"Cases\",\n                                        \"Cost\"))\npathogen\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 × 3\n   Pathogen                                                         Cases   Cost\n   <chr>                                                            <dbl>  <dbl>\n 1 Campylobacter spp. (all species)                                8.45e5 2.18e9\n 2 Clostridium perfringens                                         9.66e5 3.84e8\n 3 Cryptosporidium spp. (all species)                              5.76e4 5.84e7\n 4 Cyclospora cayetanensis                                         1.14e4 2.57e6\n 5 Listeria monocytogenes                                          1.59e3 3.19e9\n 6 Norovirus                                                       5.46e6 2.57e9\n 7 Salmonella (non-typhoidal species)                              1.03e6 4.14e9\n 8 Shigella (all species)                                          1.31e5 1.59e8\n 9 Shiga toxin-producing Escherichia coli O157 (STEC O157)         6.32e4 3.11e8\n10 non-O157 Shiga toxin-producing Escherichia coli (STEC non-O157) 1.13e5 3.17e7\n11 Toxoplasma gondii                                               8.67e4 3.74e9\n12 Vibrio parahaemolyticus                                         3.47e4 4.57e7\n13 Vibrio vulnificus                                               9.6 e1 3.59e8\n14 Vibrio non-cholera species other than V. parahaemolyticus and … 1.76e4 8.17e7\n15 Yersinia enterocolitica                                         9.77e4 3.13e8\n```\n:::\n:::\n\n\nHere, we are reading the dataset for the top 15 pathogen in terms of costs of damages and number of confirmed cases. It consists of 15 types of pathogens, the number of confirmed cases of each pathogen, and the cost in damages causes by said pathogen.\n\n::: panel-tabset \\## Pathogen: Tidy and Mutate Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npathogen_tidy <- pathogen %>%\n  drop_na(Pathogen, Cases, Cost)\n\npathogen_tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 × 3\n   Pathogen                                                         Cases   Cost\n   <chr>                                                            <dbl>  <dbl>\n 1 Campylobacter spp. (all species)                                8.45e5 2.18e9\n 2 Clostridium perfringens                                         9.66e5 3.84e8\n 3 Cryptosporidium spp. (all species)                              5.76e4 5.84e7\n 4 Cyclospora cayetanensis                                         1.14e4 2.57e6\n 5 Listeria monocytogenes                                          1.59e3 3.19e9\n 6 Norovirus                                                       5.46e6 2.57e9\n 7 Salmonella (non-typhoidal species)                              1.03e6 4.14e9\n 8 Shigella (all species)                                          1.31e5 1.59e8\n 9 Shiga toxin-producing Escherichia coli O157 (STEC O157)         6.32e4 3.11e8\n10 non-O157 Shiga toxin-producing Escherichia coli (STEC non-O157) 1.13e5 3.17e7\n11 Toxoplasma gondii                                               8.67e4 3.74e9\n12 Vibrio parahaemolyticus                                         3.47e4 4.57e7\n13 Vibrio vulnificus                                               9.6 e1 3.59e8\n14 Vibrio non-cholera species other than V. parahaemolyticus and … 1.76e4 8.17e7\n15 Yersinia enterocolitica                                         9.77e4 3.13e8\n```\n:::\n:::\n\n\nTo start off, we drop missing data with `drop_na()`. Next, we rename the variables to more specific names with `rename()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npathogen_tidy <- pathogen_tidy %>%\n  rename(\"Type of Pathogen\" = \"Pathogen\",\n         \"Number of Confirmed Cases\" = \"Cases\",\n         \"Costs in Damages in $\" = \"Cost\")\npathogen_tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 × 3\n   `Type of Pathogen`                                            Numbe…¹ Costs…²\n   <chr>                                                           <dbl>   <dbl>\n 1 Campylobacter spp. (all species)                               845024  2.18e9\n 2 Clostridium perfringens                                        965958  3.84e8\n 3 Cryptosporidium spp. (all species)                              57616  5.84e7\n 4 Cyclospora cayetanensis                                         11407  2.57e6\n 5 Listeria monocytogenes                                           1591  3.19e9\n 6 Norovirus                                                     5461731  2.57e9\n 7 Salmonella (non-typhoidal species)                            1027561  4.14e9\n 8 Shigella (all species)                                         131254  1.59e8\n 9 Shiga toxin-producing Escherichia coli O157 (STEC O157)         63153  3.11e8\n10 non-O157 Shiga toxin-producing Escherichia coli (STEC non-O1…  112752  3.17e7\n11 Toxoplasma gondii                                               86686  3.74e9\n12 Vibrio parahaemolyticus                                         34664  4.57e7\n13 Vibrio vulnificus                                                  96  3.59e8\n14 Vibrio non-cholera species other than V. parahaemolyticus an…   17564  8.17e7\n15 Yersinia enterocolitica                                         97656  3.13e8\n# … with abbreviated variable names ¹​`Number of Confirmed Cases`,\n#   ²​`Costs in Damages in $`\n```\n:::\n:::\n\n\nNext, we convert the variables with the `paste()` command below. I specify the currency `$` for the first variable, then I separated the numbers with the comma. This way, it's easier to read the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# convert numeric to currency\npathogen_tidy$`Costs in Damages in $` <- paste('$',formatC(pathogen_tidy$`Costs in Damages in $`, big.mark = ',', format = 'f')) \n# i'm not sure where the extra numbers came from\n\n# add commas\npathogen_tidy$`Number of Confirmed Cases` <- paste(formatC(pathogen_tidy$`Number of Confirmed Cases`, format=\"d\", big.mark=\",\"))\n\n# sanity checkpoint\npathogen_tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 × 3\n   `Type of Pathogen`                                            Numbe…¹ Costs…²\n   <chr>                                                         <chr>   <chr>  \n 1 Campylobacter spp. (all species)                              845,024 $ 2,18…\n 2 Clostridium perfringens                                       965,958 $ 384,…\n 3 Cryptosporidium spp. (all species)                            57,616  $ 58,3…\n 4 Cyclospora cayetanensis                                       11,407  $ 2,57…\n 5 Listeria monocytogenes                                        1,591   $ 3,18…\n 6 Norovirus                                                     5,461,… $ 2,56…\n 7 Salmonella (non-typhoidal species)                            1,027,… $ 4,14…\n 8 Shigella (all species)                                        131,254 $ 159,…\n 9 Shiga toxin-producing Escherichia coli O157 (STEC O157)       63,153  $ 311,…\n10 non-O157 Shiga toxin-producing Escherichia coli (STEC non-O1… 112,752 $ 31,7…\n11 Toxoplasma gondii                                             86,686  $ 3,74…\n12 Vibrio parahaemolyticus                                       34,664  $ 45,7…\n13 Vibrio vulnificus                                             96      $ 359,…\n14 Vibrio non-cholera species other than V. parahaemolyticus an… 17,564  $ 81,7…\n15 Yersinia enterocolitica                                       97,656  $ 313,…\n# … with abbreviated variable names ¹​`Number of Confirmed Cases`,\n#   ²​`Costs in Damages in $`\n```\n:::\n:::\n\n\n::: panel-tabset \\## Pathogen: Visualizing Data\n\nNow that I tidied the dataset, I will use a couple of graphs to visualize the damages those pathogens did. I create the dataframe with `data.frame()`, then use `ggplot` commands to make my graphs. I added the `coord_flip()` command for easier reading.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nill <- data.frame(\n  Pathogens =factor(c(\"Campylobacter spp.\",\"Clostridium perfringens\",\"Cryptosporidium spp.\",\"Cyclospora cayetanensis\",\"Listeria monocytogenes\", \"Norovirus\", \"Salmonella\", \"Shigella\", \"Shiga toxin-producing E.Coli\", \"Non-Shiga Toxin-Producing E. coli\", \"Toxoplasma gondii\", \"Vibrio parahaemolyticus\", \"Vibrio vulnificus\", \"Other Vibrio non-cholera species\", \"Yersinia enterocolitica\")),  \n  Cases =c(845024, 965958, 57616, 11407, 1591, 5461731, 1027561, 131254, 63153, 112752, 86686, 34664, 96, 17564, 97656)\n  )\nill\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                           Pathogens   Cases\n1                 Campylobacter spp.  845024\n2            Clostridium perfringens  965958\n3               Cryptosporidium spp.   57616\n4            Cyclospora cayetanensis   11407\n5             Listeria monocytogenes    1591\n6                          Norovirus 5461731\n7                         Salmonella 1027561\n8                           Shigella  131254\n9       Shiga toxin-producing E.Coli   63153\n10 Non-Shiga Toxin-Producing E. coli  112752\n11                 Toxoplasma gondii   86686\n12           Vibrio parahaemolyticus   34664\n13                 Vibrio vulnificus      96\n14  Other Vibrio non-cholera species   17564\n15           Yersinia enterocolitica   97656\n```\n:::\n\n```{.r .cell-code}\nggplot(data=ill, \n       aes(x = Pathogens, \n           y = Cases,\n           fill=Cases)) + \n  geom_bar(stat = \"identity\", fill =\"lightgreen\") +\n  geom_text(aes(label = Cases), \n            vjust=-0.5) +\n  labs(x = \"Pathogen Types\", \n       y = \"Number of Cases\", \n       title  = \"Pathogens by Number of Confirmed Cases\") +\n  scale_y_continuous(labels=scales::comma_format()) +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](Hw-3-Kristin-Abijaoude_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# create data frame\ndamage <- data.frame(\n  Pathogens =factor(c(\"Campylobacter spp.\",\"Clostridium perfringens\",\"Cryptosporidium spp.\",\"Cyclospora cayetanensis\",\"Listeria monocytogenes\", \"Norovirus\", \"Salmonella\", \"Shigella\", \"Shiga toxin-producing E.Coli\", \"Non-Shiga Toxin-Producing E. coli\", \"Toxoplasma gondii\", \"Vibrio parahaemolyticus\", \"Vibrio vulnificus\", \"Other Vibrio non-cholera species\", \"Yersinia enterocolitica\")),  \n  Damages =c(2181485783, 384277856, 58394152, 2571518, 3189686110, 2566984191, 4142179161, 159202402, 311036907, 31701852, 3744008907, 45735332, 359481557, 81749064, 313297920)\n  )\ndamage\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                           Pathogens    Damages\n1                 Campylobacter spp. 2181485783\n2            Clostridium perfringens  384277856\n3               Cryptosporidium spp.   58394152\n4            Cyclospora cayetanensis    2571518\n5             Listeria monocytogenes 3189686110\n6                          Norovirus 2566984191\n7                         Salmonella 4142179161\n8                           Shigella  159202402\n9       Shiga toxin-producing E.Coli  311036907\n10 Non-Shiga Toxin-Producing E. coli   31701852\n11                 Toxoplasma gondii 3744008907\n12           Vibrio parahaemolyticus   45735332\n13                 Vibrio vulnificus  359481557\n14  Other Vibrio non-cholera species   81749064\n15           Yersinia enterocolitica  313297920\n```\n:::\n\n```{.r .cell-code}\n# create graph\nggplot(damage, aes(x=Pathogens, y=Damages)) +\n  geom_col(fill = \"darkblue\")+\n  scale_y_continuous(labels=scales::dollar_format()) +\n  xlab(\"Types of Pathogen\") +\n  ylab(\"Costs in Damages\") +\n  ggtitle(\"Pathogens by Costs in Damages\") +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](Hw-3-Kristin-Abijaoude_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nHere's a scatterplot of the pathogens, but this time, there are labels I added with `geom_label()` and adjusted the font settings with it. In addition, I customized the graph with various sources, such as `ggtile()` and `comma_format()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create data frame\npathogens <- pathogen_tidy %>%\n  mutate(costs = parse_number(`Costs in Damages in $`),\n         cases = parse_number(`Number of Confirmed Cases`))\n\nggplot(pathogens, aes(cases, costs, label = `Type of Pathogen`)) +\n  geom_label(hjust = 0, nudge_x = 0.05) +\n  scale_y_continuous(labels=scales::dollar_format()) +\n  scale_x_continuous(labels=scales::comma_format()) +\n  ylab(\"Costs in Damages ($)\") +\n  xlab(\"Number of Confirmed Cases\") +\n  ggtitle(\"Top 15 Pathogens by Cases and Costs in Damages\") \n```\n\n::: {.cell-output-display}\n![](Hw-3-Kristin-Abijaoude_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nHere is a close up using `facet_zoom()` since there are several overlaps in the graph.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# zoom in\nlibrary(ggforce)\nggplot(pathogens, aes(cases, costs, label = `Type of Pathogen`)) +\n  geom_label(hjust = 0, nudge_x = 0.05) +\n  scale_y_continuous(labels=scales::dollar_format()) +\n  scale_x_continuous(labels=scales::comma_format()) +\n  facet_zoom(ylim = c(0, 5.0e+09))\n```\n\n::: {.cell-output-display}\n![](Hw-3-Kristin-Abijaoude_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nFrom face value, we can see how some pathogens are either deadlier or costlier than other pathogens. For example, salmonella cost the most with over \\$4 billion in damages, despite having fewer confirmed cases than Norovirus with a little bit over 1 million confirmed cases compared to over 5 million of confirmed Norovirus cases.\n\nHowever, the average person is neither a microbiologist nor an epidemiologist, so we can't tell which pathogen is deadlier, why some are costlier than others, or if there's a correlation between costs in damages and number of confirmed cases from this graph alone. If there were more information on the original dataset, I could improve my visualizations in several different ways, such as measuring the severity of each pathogen (and maybe add photos of each pathogen in the graphs) as well as infection rates, diseases caused by them, and where and how the diseases spread.\n\n::: panel-tabset \\## Pathogen: Statistical Analysis\n\nGoing back to middle school math:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Statistical Analysis for Cases\npathogen %>%\n  summarise(mean.cases = mean(Cases),\n            Median.cases = median(Cases),\n            max.cases = max(Cases),\n            min.cases = min(Cases),\n            sum.cases = sum(Cases))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 5\n  mean.cases Median.cases max.cases min.cases sum.cases\n       <dbl>        <dbl>     <dbl>     <dbl>     <dbl>\n1    594314.        86686   5461731        96   8914713\n```\n:::\n:::\n\n\nThe average amount of confirmed cases are 594,314 cases, with the norovirus having the most with over 5,000,000 while Vibrio vulnificus with the least amount with 96 cases. Collectively, these pathogens infected a total of 8,914,713 people.\n\n![Vibrio vulnificus](Vibrio_vulnificus_01.png)\n\n![Norovirus](Norwalk.jpg)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Statistical Analysis for Cost in damages\npathogen %>%\n  summarise(mean.cost = mean(Cost),\n            median.cost = median(Cost),\n            max.cost = max(Cost),\n            Min.cost = min(Cost),\n            sum.cost = sum(Cost))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 5\n    mean.cost median.cost    max.cost Min.cost     sum.cost\n        <dbl>       <dbl>       <dbl>    <dbl>        <dbl>\n1 1171452847.  313297920. 4142179161. 2571518. 17571792712.\n```\n:::\n:::\n\n\nAs for the cost, the average cost in damages is `$1,171,452,847`, with Salmonella costing the most with `$4,142,179,161`, while Cyclospora cayetanensis cost `$2,571,518` in damages. Collectively, these pathogens cost `$17,571,792,712` in damages.\n\n![Salmonella](salmonella_salmonellosis.jpeg) Salmonella\n\n![Cyclospora cayetanensis](Cyclospora_cayetanensis_stained.jpeg) Cyclospora cayetanensis\n\n#### Debt in Trillions\n\n::: panel-tabset \\## Debt in Trillions: Read Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndebts <- read_xlsx(\"/Users/kristinabijaoude/Documents/GitHub/Github Help/601_Fall_2022/posts/_data/debt_in_trillions.xlsx\")\ndebts\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 74 × 8\n   `Year and Quarter` Mortgage HE Revolvin…¹ Auto …² Credi…³ Stude…⁴ Other Total\n   <chr>                 <dbl>         <dbl>   <dbl>   <dbl>   <dbl> <dbl> <dbl>\n 1 03:Q1                  4.94         0.242   0.641   0.688   0.241 0.478  7.23\n 2 03:Q2                  5.08         0.26    0.622   0.693   0.243 0.486  7.38\n 3 03:Q3                  5.18         0.269   0.684   0.693   0.249 0.477  7.56\n 4 03:Q4                  5.66         0.302   0.704   0.698   0.253 0.449  8.07\n 5 04:Q1                  5.84         0.328   0.72    0.695   0.260 0.446  8.29\n 6 04:Q2                  5.97         0.367   0.743   0.697   0.263 0.423  8.46\n 7 04:Q3                  6.21         0.426   0.751   0.706   0.33  0.41   8.83\n 8 04:Q4                  6.36         0.468   0.728   0.717   0.346 0.423  9.04\n 9 05:Q1                  6.51         0.502   0.725   0.71    0.364 0.394  9.21\n10 05:Q2                  6.70         0.528   0.774   0.717   0.374 0.402  9.49\n# … with 64 more rows, and abbreviated variable names ¹​`HE Revolving`,\n#   ²​`Auto Loan`, ³​`Credit Card`, ⁴​`Student Loan`\n```\n:::\n:::\n\n\nNow we are going to look at another dataset about debt held by Americans in trillions of dollars from 2003 to 2021- the following types of debt listed are Mortgages, Home Equity Revolving loans, Auto loans, Credit Card debt, Student loans, and other loans.\n\n::: panel-tabset \\## Debt in Trillions: Tidy and Mutate Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndebt_tidy <- debts %>%\n  mutate(date = parse_date_time(`Year and Quarter`, orders=\"yq\")) %>%\n  select(-c(`Year and Quarter`)) %>%\n  relocate(`date`, .before = `Mortgage`) %>%\n  rename(\"Date\" = \"date\")\n  \ndebt_tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 74 × 8\n   Date                Mortgage HE Revolvi…¹ Auto …² Credi…³ Stude…⁴ Other Total\n   <dttm>                 <dbl>        <dbl>   <dbl>   <dbl>   <dbl> <dbl> <dbl>\n 1 2003-01-01 00:00:00     4.94        0.242   0.641   0.688   0.241 0.478  7.23\n 2 2003-04-01 00:00:00     5.08        0.26    0.622   0.693   0.243 0.486  7.38\n 3 2003-07-01 00:00:00     5.18        0.269   0.684   0.693   0.249 0.477  7.56\n 4 2003-10-01 00:00:00     5.66        0.302   0.704   0.698   0.253 0.449  8.07\n 5 2004-01-01 00:00:00     5.84        0.328   0.72    0.695   0.260 0.446  8.29\n 6 2004-04-01 00:00:00     5.97        0.367   0.743   0.697   0.263 0.423  8.46\n 7 2004-07-01 00:00:00     6.21        0.426   0.751   0.706   0.33  0.41   8.83\n 8 2004-10-01 00:00:00     6.36        0.468   0.728   0.717   0.346 0.423  9.04\n 9 2005-01-01 00:00:00     6.51        0.502   0.725   0.71    0.364 0.394  9.21\n10 2005-04-01 00:00:00     6.70        0.528   0.774   0.717   0.374 0.402  9.49\n# … with 64 more rows, and abbreviated variable names ¹​`HE Revolving`,\n#   ²​`Auto Loan`, ³​`Credit Card`, ⁴​`Student Loan`\n```\n:::\n\n```{.r .cell-code}\n# i tried to separate the year and quarter with str_extract(), but i wasn't having any luck with converting the century, so i had to look at the solutions in class for the most effective code\n```\n:::\n\n\nAdmittedly, I had trouble with separating the year and quarter. Going forward, whenever I come across a problem like this, the go-to codes are `mutate()` and `parse_date_time()`. With those codes, we get 4 different dates in the same year, such as 2003-01-01, 2003-04-01, 2003-07-01 and so on. These are the fiscal quarters for each year, normally used in government reports on the country's economy and other monetary policies. In addition, I removed the unnecessary data and relocated the year back into the first variable with `relocate()`.\n\nFor clarification, the numberes represent the amount of debt owed in trillions of dollars, with the vast majority of that debt owed from mortgages.\n\n::: panel-tabset \\## Debt in Trillion: Visualizing Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create data\ndates <- ymd(debt_tidy$Date)\nmortgage <- debt_tidy$Mortgage\nHE_Rev <- debt_tidy$`HE Revolving`\nauto <- debt_tidy$`Auto Loan`\nCC <- debt_tidy$`Credit Card`\nstudent <- debt_tidy$`Student Loan`\n\n# create graph\nggplot(data = debt_tidy, aes(x= `dates`)) + \n  geom_line(aes(y = mortgage, color = \"Mortgage\")) +\n  geom_line(aes(y = HE_Rev,  color=\"HE Revolving\")) +\n  geom_line(aes(y = auto, color=\"Auto Loans\")) +\n  geom_line(aes(y= CC, color =\"Credit Card\"))+\n  geom_line(aes(y = student, color = \"Student Loans\"))+\n  geom_line(aes(y = other,  color = \"Other\"))+\n  xlab(\"Year\") +\n  ylab(\"Debt in Trillions of Dollars\")+\n  scale_y_continuous(labels=scales::dollar_format()) +\n  ggtitle(\"Debt Held by Americans from 2003 to 2021\") \n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `geom_line()`:\n! Problem while computing aesthetics.\nℹ Error occurred in the 6th layer.\nCaused by error in `FUN()`:\n! object 'other' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# pivot longer with pivot_longer\ndebt_pivot <- pivot_longer(debt_tidy, cols = Mortgage:Other, names_to = \"type\", values_to = \"debt\") %>%\n  select(-c(Total)) %>%\n  mutate(\"Type of Loan\" = as.factor(type)) %>%\n  select(-c(type))\ndebt_pivot\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 444 × 3\n   Date                 debt `Type of Loan`\n   <dttm>              <dbl> <fct>         \n 1 2003-01-01 00:00:00 4.94  Mortgage      \n 2 2003-01-01 00:00:00 0.242 HE Revolving  \n 3 2003-01-01 00:00:00 0.641 Auto Loan     \n 4 2003-01-01 00:00:00 0.688 Credit Card   \n 5 2003-01-01 00:00:00 0.241 Student Loan  \n 6 2003-01-01 00:00:00 0.478 Other         \n 7 2003-04-01 00:00:00 5.08  Mortgage      \n 8 2003-04-01 00:00:00 0.26  HE Revolving  \n 9 2003-04-01 00:00:00 0.622 Auto Loan     \n10 2003-04-01 00:00:00 0.693 Credit Card   \n# … with 434 more rows\n```\n:::\n:::\n\n\nI pivoted this data from wide to long with `pivot_longer()` because I want to facet, or split the chart into smaller components, with `facet_wrap()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(debt_pivot, aes(`Date`, `debt`)) +                                    \n  geom_line(color = \"darkgreen\", size = 1) +\n  facet_wrap(. ~ `Type of Loan`) +\n  ylab(\"Debt Held in Trillions of Dollars\") +\n  xlab(\"Date and Quarter\") +\n  ggtitle(\"Debt Held by Americans from 2003 to 2021\")\n```\n\n::: {.cell-output-display}\n![](Hw-3-Kristin-Abijaoude_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nAs mentioned beforehand, the vast majority of debt held is mortgages, and that seems to be rising in a faster race in comparison to other types of debts.\n\nAs much as this dataset has more information than the pathogen, there are some questions left unanswered:\n\n-   What is the average American household income or individual American income?\n\n-   How did the recessions of 2008 and 2020 affect debt, or those who have debt?\n\n-   How does debt affect unemployment, inflation, GDP, purchasing power, and other metrics used by economics?\n\nAforementioned in the pathogen dataset, when there's more information, I could improve my visualizations by computing relationships between various economic factors (for example, plot correlation between GDP and debt) with various graphs, especially scatterplot and trends.\n\n::: panel-tabset \\## Debt in Trillion: Statistical Analysis\n\nBefore I explain further, let me explain the term standard deviation. We all know what the mean is, or the average, but the standard deviation tells us how far or near the measurements of a group are from the average. In other words, the lower the standard deviation is, the closer the measurements are to the average, while the higher, the more spread out the measurements are.\n\nWhen I measure the mean and standard deviation here, the mortgage is clearly the outlier, as the majority of the debt held is from mortgages. The standard deviation is 1.18 sd, which means the measurements for mortgages have more outliers than other debt type. Visually, this is reflected in the above graphs I computed.\n\nLooking at the sum column, Americans collected up to 871 trillion dollars in debt from 2003 to 2021, with the vast majority of it from mortgages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds_debt<-debt_pivot%>%\n  group_by(`Type of Loan`)%>%\n  summarise(mean=mean(debt),\n            sd=sd(debt),\n            sum=sum(debt))\nds_debt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  `Type of Loan`  mean     sd   sum\n  <fct>          <dbl>  <dbl> <dbl>\n1 Auto Loan      0.931 0.235   68.9\n2 Credit Card    0.757 0.0688  56.0\n3 HE Revolving   0.516 0.124   38.2\n4 Mortgage       8.27  1.18   612. \n5 Other          0.383 0.0458  28.3\n6 Student Loan   0.919 0.428   68.0\n```\n:::\n\n```{.r .cell-code}\n# how much debt did Americans collect in total\nsum(ds_debt$sum)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 871.6738\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(dfSummary(debt_tidy,\n                        varnumbers = FALSE,\n                        plain.ascii  = FALSE, \n                        style        = \"grid\", \n                        graph.magnif = 0.70, \n                        valid.col    = FALSE),\n      method = 'render',\n      table.classes = 'table-condensed')\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in dfSummary(debt_tidy, varnumbers = FALSE, plain.ascii = FALSE, : could not find function \"dfSummary\"\n```\n:::\n:::\n",
    "supporting": [
      "Hw-3-Kristin-Abijaoude_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}